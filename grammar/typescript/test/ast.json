{
  "blocks": [
    {
      "text": "For example, let's write the text from "
    },
    {
      "tag": {
        "name": "a",
        "body": {
          "blocks": [
            {
              "text": "the documentation YTsaurus"
            }
          ]
        },
        "attrList": [
          {
            "name": "href",
            "value": "https://ytsaurus.tech/docs/en/user-guide/dynamic-tables/dyn-query-language#accessing-containers",
            "empty": false
          }
        ],
        "separator": " "
      }
    },
    {
      "text": " as of 10.07.2024.\n\n"
    },
    {
      "tag": {
        "name": "header",
        "body": {
          "blocks": [
            {
              "text": "Accessing containers"
            }
          ]
        },
        "attrList": [
          {
            "name": "level",
            "value": "4",
            "empty": false
          }
        ],
        "separator": " "
      }
    },
    {
      "text": "\n\nIf a table column has the "
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "Composite"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " data type, you can use the following syntax to access that column's fields:\n- To access "
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "struct"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " fields, use a dot.\n- To access "
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "tuple"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " fields, use a dot. Indexing is "
    },
    {
      "tag": {
        "name": "b",
        "body": {
          "blocks": [
            {
              "text": "zero-based"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n- To access "
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "dict"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " fields, use square brackets.\n- To access "
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "list"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " fields, use square brackets. Indexing is "
    },
    {
      "tag": {
        "name": "b",
        "body": {
          "blocks": [
            {
              "text": "zero-based"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n\nThe correctness of accessing struct and tuple fields is checked "
    },
    {
      "tag": {
        "name": "b",
        "body": {
          "blocks": [
            {
              "text": "before starting"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " the query's execution. The correctness of accessing map and list fields is checked "
    },
    {
      "tag": {
        "name": "b",
        "body": {
          "blocks": [
            {
              "text": "during"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " the query's execution.\n\nTo enable this syntax, make sure to set "
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "syntax_version=2"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": " in the query parameters. Starting with this version of the syntax, strings are escaped with "
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "backticks"
            }
          ]
        },
        "attrList": [],
        "separator": " "
      }
    },
    {
      "text": ".\n\nTo access containers, you need to specify the full column name, including the table alias.\n\n"
    },
    {
      "tag": {
        "name": "separator",
        "body": {
          "blocks": []
        },
        "attrList": [],
        "separator": ""
      }
    },
    {
      "text": "\n"
    },
    {
      "include": {
        "value": "text"
      }
    },
    {
      "text": "\n\nUsage examples:\n"
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "t.struct.member,\nt.tuple.0,\nt.dict[\"key\"],\nt.list[1+1]\nfrom `//tmp/test` as t;\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "block",
            "value": "",
            "empty": true
          },
          {
            "name": "lang",
            "value": "sql",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n\n"
    },
    {
      "tag": {
        "name": "code",
        "body": {
          "blocks": [
            {
              "text": "$ yt create table '//tmp/test' --attributes '\\{dynamic=true; schema=<\"unique_keys\"=%true;\"strict\"=%true;>[\\{name=a;sort_order=ascending;type=int64;\\};\\{name=b;type_v3=\\{type_name=struct;members=[\\{name=c;type=\\{type_name=list;item=int64\\}\\}]\\}\\}]\\}'\n$ yt mount-table --path '//tmp/test'\n$ echo '\\{a=0;b=\\{c=[]\\}\\}' | yt insert-rows --table '//tmp/test' --format yson\n$ echo '\\{a=1;b=\\{c=[1;2;3]\\}\\}' | yt insert-rows --table '//tmp/test' --format yson\n$ echo '\\{a=2;b=\\{c=[4]\\}\\}' | yt insert-rows --table '//tmp/test' --format yson\n\n$ yt select-rows 't.b.c from `//tmp/test` as t' --syntax-version 2 --format json\n\\{\"t.b.c\":[]\\}\n\\{\"t.b.c\":[1,2,3]\\}\n\\{\"t.b.c\":[4]\\}\n\n$ yt select-rows 't.b.c[0] from `//tmp/test` as t' --syntax-version 2 --format json\n\\{\"t.b.c[0]\":null\\}\n\\{\"t.b.c[0]\":1\\}\n\\{\"t.b.c[0]\":4\\}\n"
            }
          ]
        },
        "attrList": [
          {
            "name": "block",
            "value": "",
            "empty": true
          },
          {
            "name": "lang",
            "value": "bash",
            "empty": false
          }
        ],
        "separator": "\n"
      }
    },
    {
      "text": "\n"
    }
  ]
}
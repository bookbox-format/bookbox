Для примера напишем текст из {a.href{https://ytsaurus.tech/docs/ru/user-guide/dynamic-tables/dyn-query-language#obrashenie-k-kontejneram} документации YTsaurus} по состоянию на 17.09.2024.

{header.level{4} Обращение к контейнерам}

Если столбец таблицы имеет составной тип данных {code Composite}, для обращения к полям этого столбца можно использовать следующий синтаксис:
- для доступа к полям структур ({code struct}) используется точка;
- для доступа к полям кортежей ({code tuple}) используется точка, адресация начинается {strong с нуля};
- для доступа к полям словарей ({code dict}) используются квадратные скобки;
- для доступа к полям списков ({code list}) используются квадратные скобки, адресация начинается {strong с нуля}.

Корректность обращения к полям структур и кортежей выполняется {strong до начала} выполнения запроса. Корректность обращения к полям словарей и списков выполняется {strong во время} выполнения запроса.

Чтобы воспользоваться этим синтаксисом, необходимо в параметрах запроса указать {code syntax_version=2}. Начиная с этой версии синтаксиса, для экранирования строк используется символ {code backtick}.

При обращении к контейнерам необходимо указывать полное имя столбца, включая алиас таблицы.

Примеры работы:
{code.block.lang{sql}
t.struct.member,
t.tuple.0,
t.dict["key"],
t.list[1+1]
from `//tmp/test` as t;
}

{code.block.lang{bash}
$ yt create table '//tmp/test' --attributes '\{dynamic=true; schema=<"unique_keys"=%true;"strict"=%true;>[\{name=a;sort_order=ascending;type=int64;\};\{name=b;type_v3=\{type_name=struct;members=[\{name=c;type=\{type_name=list;item=int64\}\}]\}\}]\}'
$ yt mount-table --path '//tmp/test'
$ echo '\{a=0;b=\{c=[]\}\}' | yt insert-rows --table '//tmp/test' --format yson
$ echo '\{a=1;b=\{c=[1;2;3]\}\}' | yt insert-rows --table '//tmp/test' --format yson
$ echo '\{a=2;b=\{c=[4]\}\}' | yt insert-rows --table '//tmp/test' --format yson

$ yt select-rows 't.b.c from `//tmp/test` as t' --syntax-version 2 --format json
\{"t.b.c":[]\}
\{"t.b.c":[1,2,3]\}
\{"t.b.c":[4]\}

$ yt select-rows 't.b.c[0] from `//tmp/test` as t' --syntax-version 2 --format json
\{"t.b.c[0]":null\}
\{"t.b.c[0]":1\}
\{"t.b.c[0]":4\}
}
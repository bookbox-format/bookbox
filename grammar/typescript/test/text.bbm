For example, let's write the text from {a.href{https://ytsaurus.tech/docs/en/user-guide/dynamic-tables/dyn-query-language#accessing-containers} the documentation YTsaurus} as of 10.07.2024.

{header.level{4} Accessing containers}

If a table column has the {code Composite} data type, you can use the following syntax to access that column's fields:
- To access {code struct} fields, use a dot.
- To access {code tuple} fields, use a dot. Indexing is {b zero-based}.
- To access {code dict} fields, use square brackets.
- To access {code list} fields, use square brackets. Indexing is {b zero-based}.

The correctness of accessing struct and tuple fields is checked {b before starting} the query's execution. The correctness of accessing map and list fields is checked {b during} the query's execution.

To enable this syntax, make sure to set {code syntax_version=2} in the query parameters. Starting with this version of the syntax, strings are escaped with {code backticks}.

To access containers, you need to specify the full column name, including the table alias.

Usage examples:
{code.block.lang{sql}
t.struct.member,
t.tuple.0,
t.dict["key"],
t.list[1+1]
from `//tmp/test` as t;
}

{code.block.lang{bash}
$ yt create table '//tmp/test' --attributes '\{dynamic=true; schema=<"unique_keys"=%true;"strict"=%true;>[\{name=a;sort_order=ascending;type=int64;\};\{name=b;type_v3=\{type_name=struct;members=[\{name=c;type=\{type_name=list;item=int64\}\}]\}\}]\}'
$ yt mount-table --path '//tmp/test'
$ echo '\{a=0;b=\{c=[]\}\}' | yt insert-rows --table '//tmp/test' --format yson
$ echo '\{a=1;b=\{c=[1;2;3]\}\}' | yt insert-rows --table '//tmp/test' --format yson
$ echo '\{a=2;b=\{c=[4]\}\}' | yt insert-rows --table '//tmp/test' --format yson

$ yt select-rows 't.b.c from `//tmp/test` as t' --syntax-version 2 --format json
\{"t.b.c":[]\}
\{"t.b.c":[1,2,3]\}
\{"t.b.c":[4]\}

$ yt select-rows 't.b.c[0] from `//tmp/test` as t' --syntax-version 2 --format json
\{"t.b.c[0]":null\}
\{"t.b.c[0]":1\}
\{"t.b.c[0]":4\}
}








